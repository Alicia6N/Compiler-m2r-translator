
///////////////////////////////////////////////////////////////
// This file tests:
//
// 1. scan with arrays
// 2. Expressions in the arrays brackets (constants, 
//     primitive types and arrays)
///////////////////////////////////////////////////////////////

class o05
{
	attributes:

	methods:
		int main()
		{
			// Arrays
			int p[2][3];
			float p2[2][3];
			// Primitive variables
			int a;
			float b;

			p[0][1] = 2;
			p2[0][1] = 2.2;
			a = 3.3;
			b = 3;

			print(p[0][1]);
			print(p2[0][1]);
			print(a);
			print(b);

			scan(p[0][1]);
			scan(p2[0][1]);
			scan(a);
			scan(b);

			print(p[0][1]);
			print(p2[0][1]);
			print(a);
			print(b);

			scan(p[0][1]);
			scan(p2[0][1]);
			scan(a);
			scan(b);

			print(p[0][1]);
			print(p2[0][1]);
			print(a);
			print(b);

			{
				float halo[3];

				scan(halo[1 - 1]);
				scan(halo[2 - 1]);
				scan(halo[3 - 1]);

				print(halo[1 - 1]);
				print(halo[2 - 1]);
				print(halo[3 - 1]);	// <3

				{
					print(p[0][1] + (halo[0] * (halo[1] - halo[2])));	// 2 + (9.005 * (8.005 - 10.000))

					halo[3 - 1] = 11.000;
				}

				print(halo[3 - 1]);

				{
					{
						int i;

						i = 2;

						//print(halo[p[0][1]]);
						print(p[0][1]);
						print(halo[2]);
						print(halo[1 + 1]);
						print(halo[2 * 2 - 2]);
						print(halo[i * 1 - 1 * 1 + 1 - 1 + 1]);
						p[0][i - 1] = 2;
						print(halo[p[0][1]]);		// halo[2]
						p[0][i - 1] = 1;
						print(halo[p[0][p[i - 2][i - 1]]]);	// halo[p[0][1]] = halo[1]
						print(1 * halo[0 * p[i - 2][i - 1] + p[0][1] * 0 + p[0 * 0 + 1 - 1 * 1][0 + 1]] * 1 - 0 * p[0][1] + p[0][1] * 0);	// halo[1]

						scan(halo[0 * p[(i - 2) * 2 / 2][(i - 1) * 2 / 2] + p[0 * 0 + 1 - 1 * 1][0 + 1] * 1 - 0 * p[0][1] + p[0][1] * 0]);	// halo[1]

						print(halo[i - 1] / 2.5);
						print(2.5 * halo[i - 1 / 1 * 1] / 2.5);
					}
				}
			}
		}
}