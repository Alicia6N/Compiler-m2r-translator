mov #10 B
jmp L10

L10  mov #10 @B+2		; guarda entero 10
mov @B+2 @B+0		; size = @B+2; 
mov #0 @B+3	; guarda 0 y empieza recursivo arrays de this.array
mov #0 @B+4		; guarda entero 0
mov @B+3 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+4	; fallo en este 
mov A @B+5 
mov #10 @B+6		; guarda entero 10
mov @B+5 A
muli #1 
addi #0
mov @B+6 @A
mov #0 @B+7	; guarda 0 y empieza recursivo arrays de this.array
mov #1 @B+8		; guarda entero 1
mov @B+7 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+8	; fallo en este 
mov A @B+9 
mov #2 @B+10		; guarda entero 2
mov @B+9 A
muli #1 
addi #0
mov @B+10 @A
mov #0 @B+11	; guarda 0 y empieza recursivo arrays de this.array
mov #2 @B+12		; guarda entero 2
mov @B+11 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+12	; fallo en este 
mov A @B+13 
mov #4 @B+14		; guarda entero 4
mov @B+13 A
muli #1 
addi #0
mov @B+14 @A
mov #0 @B+15	; guarda 0 y empieza recursivo arrays de this.array
mov #3 @B+16		; guarda entero 3
mov @B+15 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+16	; fallo en este 
mov A @B+17 
mov #6 @B+18		; guarda entero 6
mov @B+17 A
muli #1 
addi #0
mov @B+18 @A
mov #0 @B+19	; guarda 0 y empieza recursivo arrays de this.array
mov #4 @B+20		; guarda entero 4
mov @B+19 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+20	; fallo en este 
mov A @B+21 
mov #8 @B+22		; guarda entero 8
mov @B+21 A
muli #1 
addi #0
mov @B+22 @A
mov #0 @B+23	; guarda 0 y empieza recursivo arrays de this.array
mov #5 @B+24		; guarda entero 5
mov @B+23 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+24	; fallo en este 
mov A @B+25 
mov #9 @B+26		; guarda entero 9
mov @B+25 A
muli #1 
addi #0
mov @B+26 @A
mov #0 @B+27	; guarda 0 y empieza recursivo arrays de this.array
mov #6 @B+28		; guarda entero 6
mov @B+27 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+28	; fallo en este 
mov A @B+29 
mov #7 @B+30		; guarda entero 7
mov @B+29 A
muli #1 
addi #0
mov @B+30 @A
mov #0 @B+31	; guarda 0 y empieza recursivo arrays de this.array
mov #7 @B+32		; guarda entero 7
mov @B+31 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+32	; fallo en este 
mov A @B+33 
mov #5 @B+34		; guarda entero 5
mov @B+33 A
muli #1 
addi #0
mov @B+34 @A
mov #0 @B+35	; guarda 0 y empieza recursivo arrays de this.array
mov #8 @B+36		; guarda entero 8
mov @B+35 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+36	; fallo en este 
mov A @B+37 
mov #3 @B+38		; guarda entero 3
mov @B+37 A
muli #1 
addi #0
mov @B+38 @A
mov #0 @B+39	; guarda 0 y empieza recursivo arrays de this.array
mov #9 @B+40		; guarda entero 9
mov @B+39 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+40	; fallo en este 
mov A @B+41 
mov #1 @B+42		; guarda entero 1
mov @B+41 A
muli #1 
addi #0
mov @B+42 @A
 mov #0 @B+44		; guarda entero 0
mov @B+44 @B+42		; i = @B+44; 
L1 mov @B+42 @B+45		; guarda id i
mov @B+0 @B+46		; guarda id size
mov @B+45 A
lssi @B+46	; Expr relop Esimple
mov A @B+47	; guardar el resultado en temporal
	; WHILE
mov @B+47 A
jz L2	 ; if else
 
;print
mov #0 @B+48	; guarda 0 y empieza recursivo arrays de this.array
mov @B+42 @B+49		; guarda id i
mov @B+48 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+49	; fallo en este 
mov A @B+50 
mov #0 @B+50		; guarda 0 y empieza en Factor recursivo arrays de this.array
mov @B+50 @B+51		; guarda id this.array
muli #1 
addi #0
mov @A @B+51	;acaba array en Factor
wri @B+51	; print valor entero de temporal
wrl
mov @B+42 @B+52		; guarda id i
mov #1 @B+53		; guarda entero 1
mov @B+52 A
addi @B+53	; ENTERO + ENTERO
mov A @B+54	; guardar el resultado en temporal
mov @B+54 @B+42		; i = @B+54; 
jmp L1
	; ENDWHILE
L2  mov #0 @B+56		; guarda entero 0
mov @B+56 @B+53		; i = @B+56; 
L6 mov @B+53 @B+57		; guarda id i
mov @B+0 @B+58		; guarda id size
mov @B+57 A
lssi @B+58	; Expr relop Esimple
mov A @B+59	; guardar el resultado en temporal
	; WHILE
mov @B+59 A
jz L7	 ; if else
 mov @B+53 @B+60		; guarda id i
mov @B+60 @B+54		; j = @B+60; 
L4 mov @B+54 @B+61		; guarda id j
mov @B+0 @B+62		; guarda id size
mov @B+61 A
lssi @B+62	; Expr relop Esimple
mov A @B+63	; guardar el resultado en temporal
	; WHILE
mov @B+63 A
jz L5	 ; if else
 mov #0 @B+64	; guarda 0 y empieza recursivo arrays de this.array
mov @B+53 @B+65		; guarda id i
mov @B+64 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+65	; fallo en este 
mov A @B+66 
mov #0 @B+66		; guarda 0 y empieza en Factor recursivo arrays de this.array
mov @B+66 @B+67		; guarda id this.array
muli #1 
addi #0
mov @A @B+67	;acaba array en Factor
mov #0 @B+68	; guarda 0 y empieza recursivo arrays de this.array
mov @B+54 @B+69		; guarda id j
mov @B+68 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+69	; fallo en este 
mov A @B+70 
mov #0 @B+70		; guarda 0 y empieza en Factor recursivo arrays de this.array
mov @B+70 @B+71		; guarda id this.array
muli #1 
addi #0
mov @A @B+71	;acaba array en Factor
mov @B+67 A
gtri @B+71	; Expr relop Esimple
mov A @B+72	; guardar el resultado en temporal
mov @B+72 A
jz L3 	 ; if 
 mov #0 @B+74	; guarda 0 y empieza recursivo arrays de this.array
mov @B+53 @B+75		; guarda id i
mov @B+74 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+75	; fallo en este 
mov A @B+76 
mov #0 @B+76		; guarda 0 y empieza en Factor recursivo arrays de this.array
mov @B+76 @B+77		; guarda id this.array
muli #1 
addi #0
mov @A @B+77	;acaba array en Factor
mov @B+77 @B+72		; tmp = @B+77; 
mov #0 @B+78	; guarda 0 y empieza recursivo arrays de this.array
mov @B+53 @B+79		; guarda id i
mov @B+78 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+79	; fallo en este 
mov A @B+80 
mov #0 @B+81	; guarda 0 y empieza recursivo arrays de this.array
mov @B+54 @B+82		; guarda id j
mov @B+81 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+82	; fallo en este 
mov A @B+83 
mov #0 @B+83		; guarda 0 y empieza en Factor recursivo arrays de this.array
mov @B+83 @B+84		; guarda id this.array
muli #1 
addi #0
mov @A @B+84	;acaba array en Factor
mov @B+80 A
muli #1 
addi #0
mov @B+84 @A
mov #0 @B+85	; guarda 0 y empieza recursivo arrays de this.array
mov @B+54 @B+86		; guarda id j
mov @B+85 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+86	; fallo en este 
mov A @B+87 
mov @B+72 @B+88		; guarda id tmp
mov @B+87 A
muli #1 
addi #0
mov @B+88 @A
L3 mov @B+54 @B+88		; guarda id j
mov #1 @B+89		; guarda entero 1
mov @B+88 A
addi @B+89	; ENTERO + ENTERO
mov A @B+90	; guardar el resultado en temporal
mov @B+90 @B+54		; j = @B+90; 
jmp L4
	; ENDWHILE
L5 mov @B+53 @B+91		; guarda id i
mov #1 @B+92		; guarda entero 1
mov @B+91 A
addi @B+92	; ENTERO + ENTERO
mov A @B+93	; guardar el resultado en temporal
mov @B+93 @B+53		; i = @B+93; 
jmp L6
	; ENDWHILE
L7  mov #0 @B+93		; guarda entero 0
mov @B+93 @B+91		; i = @B+93; 
L8 mov @B+91 @B+94		; guarda id i
mov @B+0 @B+95		; guarda id size
mov @B+94 A
lssi @B+95	; Expr relop Esimple
mov A @B+96	; guardar el resultado en temporal
	; WHILE
mov @B+96 A
jz L9	 ; if else
 
;print
mov #0 @B+97	; guarda 0 y empieza recursivo arrays de this.array
mov @B+91 @B+98		; guarda id i
mov @B+97 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+98	; fallo en este 
mov A @B+99 
mov #0 @B+99		; guarda 0 y empieza en Factor recursivo arrays de this.array
mov @B+99 @B+100		; guarda id this.array
muli #1 
addi #0
mov @A @B+100	;acaba array en Factor
wri @B+100	; print valor entero de temporal
wrl
mov @B+91 @B+101		; guarda id i
mov #1 @B+102		; guarda entero 1
mov @B+101 A
addi @B+102	; ENTERO + ENTERO
mov A @B+103	; guardar el resultado en temporal
mov @B+103 @B+91		; i = @B+103; 
jmp L8
	; ENDWHILE
L9 halt
