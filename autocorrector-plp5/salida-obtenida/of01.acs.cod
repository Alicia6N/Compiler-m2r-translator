;Imprime temp = 
;Imprime temp = 
;Imprime temp = 
;Imprime temp = 
;Imprime temp = 
;Imprime temp = 
;Imprime temp = 
;Imprime temp = 
;Imprime temp = 
mov #0 B
jmp L9

; metodo: 'test4'
L1 mov $444.0 @B+1		; guarda real 444.0
wrr @B+1	; print valor real de temporal
wrl
; DIR USED = 2
mov @B-2 A
jmp @A

; metodo: 'test2'
L3 ; Secuencia de llamada
mov B @B+2
mov B A
addi #3
mov A B
mvetq L2 @B-2
jmp L1
L2 mov @B-1 B
mov #1 @B+1		; guarda entero 1
mov @B+0 A
addi @B+1	; ENTERO + ENTERO
mov A @B+2	; guardar el resultado en temporal
wri @B+2	; print valor entero de temporal
wrl
; DIR USED = 3
mov @B-2 A
jmp @A

; metodo: 'test'
L4 mov #1234 @B+3		; guarda entero 1234
mov #6 @B+4		; guarda entero 6
mov #1 @B+5		; guarda entero 1
mov @B+4 A
muli @B+5	; ENTERO * ENTERO
mov A @B+6
mov @B+3 A
addi @B+6	; ENTERO + ENTERO
mov A @B+7	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+7 @B-3
mov @B-2 A
jmp @A
; DIR USED = 8
mov @B-2 A
jmp @A

; metodo: 'test3'
L5 mov $500.01 @B+2		; guarda real 500.01
; Secuencia de retorno
mov @B+2 @B-3
mov @B-2 A
jmp @A
; DIR USED = 3
mov @B-2 A
jmp @A

L9  mov #2 @B+1		; guarda entero 2
wri @B+1	; print valor entero de temporal
wrl
mov #2 @B+2		; guarda entero 2
mov @B+2 @B+6	; asigna un param
mov #2 @B+3		; guarda entero 2
mov @B+3 @B+7	; asigna un param
; Secuencia de llamada
mov B @B+5
mov B A
addi #6
mov A B
mvetq L6 @B-2
jmp L4
L6 mov @B-1 B
wri @B+3	; print valor entero de temporal
wrl
mov #23 @B+4		; guarda entero 23
wri @B+4	; print valor entero de temporal
wrl
mov #2 @B+5		; guarda entero 2
mov @B+5 @B+9	; asigna un param
; Secuencia de llamada
mov B @B+7
mov B A
addi #8
mov A B
mvetq L7 @B-2
jmp L5
L7 mov @B-1 B
wri @B+5	; print valor entero de temporal
wrl
mov #54 @B+6		; guarda entero 54
wri @B+6	; print valor entero de temporal
wrl
; Secuencia de llamada
mov B @B+8
mov B A
addi #9
mov A B
mvetq L8 @B-2
jmp L3
L8 mov @B-1 B
wri @B+6	; print valor entero de temporal
wrl
mov #117 @B+7		; guarda entero 117
wri @B+7	; print valor entero de temporal
wrl
halt
