; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.a empieza en = 0
;Guarda desde: 0
;Actual empieza: 3
;Hasta: 3
;Guarda desde: 0
;Actual empieza: 3
;Hasta: 3
;Guarda desde: 0
;Actual empieza: 3
;Hasta: 3
; Array this.a empieza en = 0
; Array this.a empieza en = 0
;Guarda desde: 3
;Actual empieza: 6
;Hasta: 6
; Array this.a empieza en = 0
; Array this.a empieza en = 0
;Guarda desde: 9
;Actual empieza: 12
;Hasta: 12
; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.a empieza en = 0
;Guarda desde: 19
;Actual empieza: 22
;Hasta: 22
;Guarda desde: 22
;Actual empieza: 25
;Hasta: 25
;Guarda desde: 25
;Actual empieza: 28
;Hasta: 28
;Guarda desde: 28
;Actual empieza: 31
;Hasta: 31
;Guarda desde: 31
;Actual empieza: 34
;Hasta: 34
mov #1 B
jmp L14

; metodo: 't1'
L1 mov 0 @B+1		; guarda id this.a
mov #1 @B+2		; guarda entero 1
mov @B+1 A
addi @B+2	; ENTERO + ENTERO
mov A @B+3	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+3 @B-3
mov @B-2 A
jmp @A
; DIR USED = 4
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 't2'
L2 mov 0 @B+1		; guarda id this.a
mov #1 @B+2		; guarda entero 1
mov @B+1 A
addi @B+2	; ENTERO + ENTERO
mov A @B+3	; guardar el resultado en temporal
mov @B+3 0		; this.a = @B+3; 
mov 0 @B+4		; guarda id this.a
mov #1 @B+5		; guarda entero 1
mov @B+4 A
subi @B+5	; ENTERO - ENTERO
mov A @B+6	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+6 @B-3
mov @B-2 A
jmp @A
; DIR USED = 7
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 't3'
L3 mov #5 @B+1		; guarda entero 5
; Secuencia de retorno
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 't4'
L4 mov $5.987 @B+1		; guarda real 5.987
; Secuencia de retorno
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 't5'
L5 mov #5 @B+1		; guarda entero 5
; Secuencia de retorno
mov @B+1 A
itor
mov A @B+1
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 't6'
L6 mov $5.987 @B+1		; guarda real 5.987
; Secuencia de retorno
mov @B+1 A
rtoi
mov A @B+1
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c4'
L7 mov $10.23 @B+1		; guarda real 10.23
; Secuencia de retorno
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c3'
L8 ; Secuencia de llamada
mov B @B+3
mov B A
addi #4
mov A B
mvetq L9 @B-2
jmp L7
L9 mov @B-1 B
mov $1.9 @B+4		; guarda real 1.9
mov @B+1 A
addr @B+4	; REAL + REAL
mov A @B+5	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+5 A
rtoi
mov A @B+5
mov @B+5 @B-3
mov @B-2 A
jmp @A
; DIR USED = 6
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c2'
L10 ; Secuencia de llamada
mov B @B+3
mov B A
addi #4
mov A B
mvetq L11 @B-2
jmp L8
L11 mov @B-1 B
mov #2 @B+4		; guarda entero 2
mov @B+1 A
addi @B+4	; ENTERO + ENTERO
mov A @B+5	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+5 A
itor
mov A @B+5
mov @B+5 @B-3
mov @B-2 A
jmp @A
; DIR USED = 6
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c1'
L12 ; Secuencia de llamada
mov B @B+3
mov B A
addi #4
mov A B
mvetq L13 @B-2
jmp L10
L13 mov @B-1 B
mov $2.9 @B+4		; guarda real 2.9
mov @B+1 A
mulr @B+4	; REAL * REAL
mov A @B+5
; Secuencia de retorno
mov @B+5 A
rtoi
mov A @B+5
mov @B+5 @B-3
mov @B-2 A
jmp @A
; DIR USED = 6
mov #0 @B-3
mov @B-2 A
jmp @A

L14  mov #44 @B+1		; guarda entero 44
mov @B+1 0		; this.a = @B+1; 

;print
mov #123 @B+2		; guarda entero 123
wri @B+2	; print valor entero de temporal
wrl

;print
mov 0 @B+3		; guarda id this.a
wri @B+3	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+6
mov B A
addi #7
mov A B
mvetq L15 @B-2
jmp L1
L15 mov @B-1 B
wri @B+4	; print valor entero de temporal
wrl

;print
mov 0 @B+7		; guarda id this.a
wri @B+7	; print valor entero de temporal
wrl

;print
mov #321 @B+8		; guarda entero 321
wri @B+8	; print valor entero de temporal
wrl

;print
mov 0 @B+9		; guarda id this.a
wri @B+9	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+12
mov B A
addi #13
mov A B
mvetq L16 @B-2
jmp L2
L16 mov @B-1 B
wri @B+10	; print valor entero de temporal
wrl

;print
mov 0 @B+13		; guarda id this.a
wri @B+13	; print valor entero de temporal
wrl
mov 0 @B+14		; guarda id this.a
mov 0 @B+15		; guarda id this.a
mov @B+14 A
addi @B+15	; ENTERO + ENTERO
mov A @B+16	; guardar el resultado en temporal
mov 0 @B+17		; guarda id this.a
mov @B+16 A
subi @B+17	; ENTERO - ENTERO
mov A @B+18	; guardar el resultado en temporal
mov @B+18 0		; this.a = @B+18; 

;print
mov 0 @B+19		; guarda id this.a
wri @B+19	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+22
mov B A
addi #23
mov A B
mvetq L17 @B-2
jmp L3
L17 mov @B-1 B
wri @B+20	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+25
mov B A
addi #26
mov A B
mvetq L18 @B-2
jmp L4
L18 mov @B-1 B
wrr @B+23	; print valor real de temporal
wrl

;print
; Secuencia de llamada
mov B @B+28
mov B A
addi #29
mov A B
mvetq L19 @B-2
jmp L5
L19 mov @B-1 B
wrr @B+26	; print valor real de temporal
wrl

;print
; Secuencia de llamada
mov B @B+31
mov B A
addi #32
mov A B
mvetq L20 @B-2
jmp L6
L20 mov @B-1 B
wri @B+29	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+34
mov B A
addi #35
mov A B
mvetq L21 @B-2
jmp L12
L21 mov @B-1 B
wri @B+32	; print valor entero de temporal
wrl

;print
mov #117 @B+35		; guarda entero 117
wri @B+35	; print valor entero de temporal
wrl
halt
