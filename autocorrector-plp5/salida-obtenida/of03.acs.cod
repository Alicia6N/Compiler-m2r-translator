mov #1 B
jmp L14

; metodo: 't1'
L1 mov 0 @B+1		; guarda id this.a
mov #1 @B+2		; guarda entero 1
mov @B+1 A
addi @B+2	; ENTERO + ENTERO
mov A @B+3	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+3 @B-3
mov @B-2 A
jmp @A
; DIR USED = 4
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 't2'
L2 mov 0 @B+1		; guarda id this.a
mov #1 @B+2		; guarda entero 1
mov @B+1 A
addi @B+2	; ENTERO + ENTERO
mov A @B+3	; guardar el resultado en temporal
mov @B+3 0		; this.a = @B+3; 
mov 0 @B+4		; guarda id this.a
mov #1 @B+5		; guarda entero 1
mov @B+4 A
subi @B+5	; ENTERO - ENTERO
mov A @B+6	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+6 @B-3
mov @B-2 A
jmp @A
; DIR USED = 7
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 't3'
L3 mov #5 @B+1		; guarda entero 5
; Secuencia de retorno
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 't4'
L4 mov $5.987 @B+1		; guarda real 5.987
; Secuencia de retorno
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 't5'
L5 mov #5 @B+1		; guarda entero 5
; Secuencia de retorno
mov @B+1 A
itor
mov A @B+1
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 't6'
L6 mov $5.987 @B+1		; guarda real 5.987
; Secuencia de retorno
mov @B+1 A
rtoi
mov A @B+1
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c4'
L7 mov $10.23 @B+1		; guarda real 10.23
; Secuencia de retorno
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c3'
L9 ; Secuencia de llamada
mov B @B+2
mov B A
addi #3
mov A B
mvetq L8 @B-2
jmp L7
L8 mov @B-1 B
mov $1.9 @B+1		; guarda real 1.9
mov @B+0 A
addr @B+1	; REAL + REAL
mov A @B+2	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+2 A
rtoi
mov A @B+2
mov @B+2 @B-3
mov @B-2 A
jmp @A
; DIR USED = 3
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c2'
L11 ; Secuencia de llamada
mov B @B+2
mov B A
addi #3
mov A B
mvetq L10 @B-2
jmp L9
L10 mov @B-1 B
mov #2 @B+1		; guarda entero 2
mov @B+0 A
addi @B+1	; ENTERO + ENTERO
mov A @B+2	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+2 A
itor
mov A @B+2
mov @B+2 @B-3
mov @B-2 A
jmp @A
; DIR USED = 3
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 'c1'
L13 ; Secuencia de llamada
mov B @B+2
mov B A
addi #3
mov A B
mvetq L12 @B-2
jmp L11
L12 mov @B-1 B
mov $2.9 @B+1		; guarda real 2.9
mov @B+0 A
mulr @B+1	; REAL * REAL
mov A @B+2
; Secuencia de retorno
mov @B+2 A
rtoi
mov A @B+2
mov @B+2 @B-3
mov @B-2 A
jmp @A
; DIR USED = 3
mov #0 @B-3
mov @B-2 A
jmp @A

L14  mov #44 @B+1		; guarda entero 44
mov @B+1 0		; this.a = @B+1; 

;print
mov #123 @B+2		; guarda entero 123
wri @B+2	; print valor entero de temporal
wrl

;print
mov 0 @B+3		; guarda id this.a
wri @B+3	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+5
mov B A
addi #6
mov A B
mvetq L15 @B-2
jmp L1
L15 mov @B-1 B
wri @B+3	; print valor entero de temporal
wrl

;print
mov 0 @B+4		; guarda id this.a
wri @B+4	; print valor entero de temporal
wrl

;print
mov #321 @B+5		; guarda entero 321
wri @B+5	; print valor entero de temporal
wrl

;print
mov 0 @B+6		; guarda id this.a
wri @B+6	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+8
mov B A
addi #9
mov A B
mvetq L16 @B-2
jmp L2
L16 mov @B-1 B
wri @B+6	; print valor entero de temporal
wrl

;print
mov 0 @B+7		; guarda id this.a
wri @B+7	; print valor entero de temporal
wrl
mov 0 @B+8		; guarda id this.a
mov 0 @B+9		; guarda id this.a
mov @B+8 A
addi @B+9	; ENTERO + ENTERO
mov A @B+10	; guardar el resultado en temporal
mov 0 @B+11		; guarda id this.a
mov @B+10 A
subi @B+11	; ENTERO - ENTERO
mov A @B+12	; guardar el resultado en temporal
mov @B+12 0		; this.a = @B+12; 

;print
mov 0 @B+13		; guarda id this.a
wri @B+13	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+15
mov B A
addi #16
mov A B
mvetq L17 @B-2
jmp L3
L17 mov @B-1 B
wri @B+13	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+15
mov B A
addi #16
mov A B
mvetq L18 @B-2
jmp L4
L18 mov @B-1 B
wrr @B+13	; print valor real de temporal
wrl

;print
; Secuencia de llamada
mov B @B+15
mov B A
addi #16
mov A B
mvetq L19 @B-2
jmp L5
L19 mov @B-1 B
wrr @B+13	; print valor real de temporal
wrl

;print
; Secuencia de llamada
mov B @B+15
mov B A
addi #16
mov A B
mvetq L20 @B-2
jmp L6
L20 mov @B-1 B
wri @B+13	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+15
mov B A
addi #16
mov A B
mvetq L21 @B-2
jmp L13
L21 mov @B-1 B
wri @B+13	; print valor entero de temporal
wrl

;print
mov #117 @B+14		; guarda entero 117
wri @B+14	; print valor entero de temporal
wrl
halt
