; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.d empieza en = 21
;Guarda desde: 0
;Actual empieza: 3
;Hasta: 3
; Array this.b empieza en = 1
; Array this.c empieza en = 11
; Array this.b empieza en = 1
; Array this.c empieza en = 11
; Array this.c empieza en = 11
; Array this.c empieza en = 11
;Guarda desde: 0
;Actual empieza: 3
;Hasta: 3
; Array this.d empieza en = 21
; Array this.d empieza en = 21
; Array this.a empieza en = 0
; Array this.a empieza en = 0
; Array this.d empieza en = 21
;Guarda desde: 5
;Actual empieza: 8
;Hasta: 8
; Array this.d empieza en = 21
; Array this.a empieza en = 0
;Guarda desde: 10
;Actual empieza: 13
;Hasta: 13
; Array this.b empieza en = 1
; Array this.c empieza en = 11
mov #22 B
jmp L7

; metodo: 't2'
L1 rdi 0	; guardar valor entero en temporal

mov 0 @B+1		; guarda id this.a
; Secuencia de retorno
mov @B+1 A
itor
mov A @B+1
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 2
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 't1'
L2 rdr 21	; guardar valor real en temporal

; Secuencia de llamada
mov B @B+3
mov B A
addi #4
mov A B
mvetq L3 @B-2
jmp L1
L3 mov @B-1 B
; Secuencia de retorno
mov @B+1 A
rtoi
mov A @B+1
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 4
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 't3'
L4 mov #0 @B+1	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.b
mov #5 @B+2		; guarda entero 5
mov @B+1 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+2	; fallo en este 
mov A @B+3 

;scan
mov @B+3 A
muli #1 
addi #1
rdr @B+4	; guardar valor real en temporal
mov @B+4 @A

mov #0 @B+5	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.c
mov #7 @B+6		; guarda entero 7
mov @B+5 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+6	; fallo en este 
mov A @B+7 

;scan
mov @B+7 A
muli #1 
addi #11
rdi @B+8	; guardar valor entero en temporal
mov @B+8 @A

mov #0 @B+9	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.b
mov #5 @B+10		; guarda entero 5
mov #0 @B+11	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.c
mov #7 @B+12		; guarda entero 7
mov @B+11 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+12	; fallo en este 
mov A @B+13 
mov #0 @B+13		; guarda 0 y empieza en Factor recursivo arrays de this.c
mov @B+13 @B+14		; guarda id this.c
muli #1 
addi #11
mov @A @B+14	;acaba array en Factor
mov #0 @B+15	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.c
mov #7 @B+16		; guarda entero 7
mov @B+15 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+16	; fallo en este 
mov A @B+17 
mov #0 @B+17		; guarda 0 y empieza en Factor recursivo arrays de this.c
mov @B+17 @B+18		; guarda id this.c
muli #1 
addi #11
mov @A @B+18	;acaba array en Factor
mov @B+14 A
divi @B+18	; ENTERO / ENTERO
mov A @B+19
mov #1 @B+20		; guarda entero 1
mov @B+19 A
muli @B+20	; ENTERO * ENTERO
mov A @B+21
mov @B+10 A
addi @B+21	; ENTERO + ENTERO
mov A @B+22	; guardar el resultado en temporal
mov #1 @B+23		; guarda entero 1
mov @B+22 A
subi @B+23	; ENTERO - ENTERO
mov A @B+24	; guardar el resultado en temporal
mov @B+9 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+24	; fallo en este 
mov A @B+25 
mov #0 @B+25		; guarda 0 y empieza en Factor recursivo arrays de this.b
mov @B+25 @B+26		; guarda id this.b
muli #1 
addi #1
mov @A @B+26	;acaba array en Factor
mov #0 @B+27	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.c
mov #7 @B+28		; guarda entero 7
mov @B+27 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+28	; fallo en este 
mov A @B+29 
mov #0 @B+29		; guarda 0 y empieza en Factor recursivo arrays de this.c
mov @B+29 @B+30		; guarda id this.c
muli #1 
addi #11
mov @A @B+30	;acaba array en Factor
mov @B+30 A
itor 
mov A @B+32 
mov @B+26 A
addr @B+32	; REAL + REAL
mov A @B+31	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+31 @B-3
mov @B-2 A
jmp @A
; DIR USED = 33
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 't4'
L5 ; Secuencia de llamada
mov B @B+3
mov B A
addi #4
mov A B
mvetq L6 @B-2
jmp L4
L6 mov @B-1 B
; Secuencia de retorno
mov @B+1 A
rtoi
mov A @B+1
mov @B+1 @B-3
mov @B-2 A
jmp @A
; DIR USED = 4
mov #0 @B-3
mov @B-2 A
jmp @A

L7  mov #2 @B+1		; guarda entero 2
mov @B+1 A
itor
mov A @B+1
mov @B+1 21		; this.d = @B+1; 

;print
mov 21 @B+2		; guarda id this.d
wrr @B+2	; print valor real de temporal
wrl
mov $3.3 @B+3		; guarda real 3.3
mov @B+3 A
rtoi
mov A @B+3
mov @B+3 0		; this.a = @B+3; 

;print
mov 0 @B+4		; guarda id this.a
wri @B+4	; print valor entero de temporal
wrl

;print
mov 21 @B+5		; guarda id this.d
wrr @B+5	; print valor real de temporal
wrl

;print
; Secuencia de llamada
mov B @B+8
mov B A
addi #9
mov A B
mvetq L8 @B-2
jmp L2
L8 mov @B-1 B
wri @B+6	; print valor entero de temporal
wrl

;print
mov 21 @B+9		; guarda id this.d
wrr @B+9	; print valor real de temporal
wrl

;print
mov 0 @B+10		; guarda id this.a
wri @B+10	; print valor entero de temporal
wrl

;print
; Secuencia de llamada
mov B @B+13
mov B A
addi #14
mov A B
mvetq L9 @B-2
jmp L4
L9 mov @B-1 B
wrr @B+11	; print valor real de temporal
wrl

;print
mov #0 @B+14	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.b
mov #5 @B+15		; guarda entero 5
mov @B+14 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+15	; fallo en este 
mov A @B+16 
mov #0 @B+16		; guarda 0 y empieza en Factor recursivo arrays de this.b
mov @B+16 @B+17		; guarda id this.b
muli #1 
addi #1
mov @A @B+17	;acaba array en Factor
wrr @B+17	; print valor real de temporal
wrl

;print
mov #0 @B+18	; guarda 0 y empieza recursivo arrays de en 'Ref id' this.c
mov #7 @B+19		; guarda entero 7
mov @B+18 A 	; hace recursivo de arrays en Ref
muli #10
addi @B+19	; fallo en este 
mov A @B+20 
mov #0 @B+20		; guarda 0 y empieza en Factor recursivo arrays de this.c
mov @B+20 @B+21		; guarda id this.c
muli #1 
addi #11
mov @A @B+21	;acaba array en Factor
wri @B+21	; print valor entero de temporal
wrl
halt
