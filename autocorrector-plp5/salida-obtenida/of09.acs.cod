;Imprime temp = 0
;Imprime temp = 0
;Imprime temp = 0
;Imprime temp = 0
;Imprime temp = 1
;Imprime temp = 1
;Imprime temp = 1
;Imprime temp = 1
;Imprime temp = 0
;Imprime temp = 0
;Imprime temp = 0
;Imprime temp = 0
;Imprime temp = 1
;Imprime temp = 1
;Imprime temp = 1
;Imprime temp = 1
mov #0 B
jmp L5

; metodo: 'sumaenteros1'
L1 mov @B+0 @B+3		; guarda id a
mov @B+1 @B+4		; guarda id b
mov @B+3 A
addi @B+4	; ENTERO + ENTERO
mov A @B+5	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+5 @B-3
mov @B-2 A
jmp @A
; DIR USED = 6
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 'sumaenteros2'
L2 mov @B+0 @B+3		; guarda id a
mov @B+1 @B+4		; guarda id b
mov @B+3 A
addi @B+4	; ENTERO + ENTERO
mov A @B+5	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+5 @B-3
mov @B-2 A
jmp @A
; DIR USED = 6
mov $0.0 @B-3
mov @B-2 A
jmp @A

; metodo: 'sumareales1'
L3 mov @B+0 @B+3		; guarda id a
mov @B+1 @B+4		; guarda id b
mov @B+3 A
addr @B+4	; REAL + REAL
mov A @B+5	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+5 @B-3
mov @B-2 A
jmp @A
; DIR USED = 6
mov #0 @B-3
mov @B-2 A
jmp @A

; metodo: 'sumareales2'
L4 mov @B+0 @B+3		; guarda id a
mov @B+1 @B+4		; guarda id b
mov @B+3 A
addr @B+4	; REAL + REAL
mov A @B+5	; guardar el resultado en temporal
; Secuencia de retorno
mov @B+5 @B-3
mov @B-2 A
jmp @A
; DIR USED = 6
mov $0.0 @B-3
mov @B-2 A
jmp @A

L5  
;print
mov #4 @B+1		; guarda entero 4
mov @B+1 @B+5	; asigna un param
mov #6 @B+2		; guarda entero 6
mov @B+2 @B+6	; asigna un param
; Secuencia de llamada
mov B @B+4
mov B A
addi #5
mov A B
mvetq L6 @B-2
jmp L1
L6 mov @B-1 B
wri @B+2	; print valor entero de temporal
wrl

;print
mov $4.9 @B+3		; guarda real 4.9
mov @B+3 A
rtoi 
mov A @B+7	; asigna un param
mov #6 @B+4		; guarda entero 6
mov @B+4 @B+8	; asigna un param
; Secuencia de llamada
mov B @B+6
mov B A
addi #7
mov A B
mvetq L7 @B-2
jmp L1
L7 mov @B-1 B
wri @B+4	; print valor entero de temporal
wrl

;print
mov #4 @B+5		; guarda entero 4
mov @B+5 @B+9	; asigna un param
mov $6.9 @B+6		; guarda real 6.9
mov @B+6 A
rtoi 
mov A @B+10	; asigna un param
; Secuencia de llamada
mov B @B+8
mov B A
addi #9
mov A B
mvetq L8 @B-2
jmp L1
L8 mov @B-1 B
wri @B+6	; print valor entero de temporal
wrl

;print
mov $4.9 @B+7		; guarda real 4.9
mov @B+7 A
rtoi 
mov A @B+11	; asigna un param
mov $6.9 @B+8		; guarda real 6.9
mov @B+8 A
rtoi 
mov A @B+12	; asigna un param
; Secuencia de llamada
mov B @B+10
mov B A
addi #11
mov A B
mvetq L9 @B-2
jmp L1
L9 mov @B-1 B
wri @B+8	; print valor entero de temporal
wrl

;print
mov #4 @B+9		; guarda entero 4
mov @B+9 @B+13	; asigna un param
mov #6 @B+10		; guarda entero 6
mov @B+10 @B+14	; asigna un param
; Secuencia de llamada
mov B @B+12
mov B A
addi #13
mov A B
mvetq L10 @B-2
jmp L2
L10 mov @B-1 B
wrr @B+10	; print valor real de temporal
wrl

;print
mov $4.9 @B+11		; guarda real 4.9
mov @B+11 A
rtoi 
mov A @B+15	; asigna un param
mov #6 @B+12		; guarda entero 6
mov @B+12 @B+16	; asigna un param
; Secuencia de llamada
mov B @B+14
mov B A
addi #15
mov A B
mvetq L11 @B-2
jmp L2
L11 mov @B-1 B
wrr @B+12	; print valor real de temporal
wrl

;print
mov #4 @B+13		; guarda entero 4
mov @B+13 @B+17	; asigna un param
mov $6.9 @B+14		; guarda real 6.9
mov @B+14 A
rtoi 
mov A @B+18	; asigna un param
; Secuencia de llamada
mov B @B+16
mov B A
addi #17
mov A B
mvetq L12 @B-2
jmp L2
L12 mov @B-1 B
wrr @B+14	; print valor real de temporal
wrl

;print
mov $4.9 @B+15		; guarda real 4.9
mov @B+15 A
rtoi 
mov A @B+19	; asigna un param
mov $6.9 @B+16		; guarda real 6.9
mov @B+16 A
rtoi 
mov A @B+20	; asigna un param
; Secuencia de llamada
mov B @B+18
mov B A
addi #19
mov A B
mvetq L13 @B-2
jmp L2
L13 mov @B-1 B
wrr @B+16	; print valor real de temporal
wrl

;print
mov $4.9 @B+17		; guarda real 4.9
mov @B+17 @B+21	; asigna un param
mov $6.9 @B+18		; guarda real 6.9
mov @B+18 A
rtoi 
mov A @B+22	; asigna un param
; Secuencia de llamada
mov B @B+20
mov B A
addi #21
mov A B
mvetq L14 @B-2
jmp L3
L14 mov @B-1 B
wri @B+18	; print valor entero de temporal
wrl

;print
mov #4 @B+19		; guarda entero 4
mov @B+19 A
itor 
mov A @B+23	; asigna un param
mov $6.9 @B+20		; guarda real 6.9
mov @B+20 A
rtoi 
mov A @B+24	; asigna un param
; Secuencia de llamada
mov B @B+22
mov B A
addi #23
mov A B
mvetq L15 @B-2
jmp L3
L15 mov @B-1 B
wri @B+20	; print valor entero de temporal
wrl

;print
mov $4.9 @B+21		; guarda real 4.9
mov @B+21 @B+25	; asigna un param
mov #6 @B+22		; guarda entero 6
mov @B+22 @B+26	; asigna un param
; Secuencia de llamada
mov B @B+24
mov B A
addi #25
mov A B
mvetq L16 @B-2
jmp L3
L16 mov @B-1 B
wri @B+22	; print valor entero de temporal
wrl

;print
mov #4 @B+23		; guarda entero 4
mov @B+23 A
itor 
mov A @B+27	; asigna un param
mov #6 @B+24		; guarda entero 6
mov @B+24 @B+28	; asigna un param
; Secuencia de llamada
mov B @B+26
mov B A
addi #27
mov A B
mvetq L17 @B-2
jmp L3
L17 mov @B-1 B
wri @B+24	; print valor entero de temporal
wrl

;print
mov $4.9 @B+25		; guarda real 4.9
mov @B+25 @B+29	; asigna un param
mov $6.9 @B+26		; guarda real 6.9
mov @B+26 A
rtoi 
mov A @B+30	; asigna un param
; Secuencia de llamada
mov B @B+28
mov B A
addi #29
mov A B
mvetq L18 @B-2
jmp L4
L18 mov @B-1 B
wrr @B+26	; print valor real de temporal
wrl

;print
mov #4 @B+27		; guarda entero 4
mov @B+27 A
itor 
mov A @B+31	; asigna un param
mov $6.9 @B+28		; guarda real 6.9
mov @B+28 A
rtoi 
mov A @B+32	; asigna un param
; Secuencia de llamada
mov B @B+30
mov B A
addi #31
mov A B
mvetq L19 @B-2
jmp L4
L19 mov @B-1 B
wrr @B+28	; print valor real de temporal
wrl

;print
mov $4.9 @B+29		; guarda real 4.9
mov @B+29 @B+33	; asigna un param
mov #6 @B+30		; guarda entero 6
mov @B+30 @B+34	; asigna un param
; Secuencia de llamada
mov B @B+32
mov B A
addi #33
mov A B
mvetq L20 @B-2
jmp L4
L20 mov @B-1 B
wrr @B+30	; print valor real de temporal
wrl

;print
mov #4 @B+31		; guarda entero 4
mov @B+31 A
itor 
mov A @B+35	; asigna un param
mov #6 @B+32		; guarda entero 6
mov @B+32 @B+36	; asigna un param
; Secuencia de llamada
mov B @B+34
mov B A
addi #35
mov A B
mvetq L21 @B-2
jmp L4
L21 mov @B-1 B
wrr @B+32	; print valor real de temporal
wrl
halt
