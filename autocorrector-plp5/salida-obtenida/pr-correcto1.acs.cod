mov #3 B
jmp L1

L1  mov $7.5 @B+3		; guarda real 7.5
mov @B+3 @B+0		; a = @B+3; 
mov @B+0 @B+4		; guarda id a
mov @B+4 A
rtoi
mov A @B+4
mov @B+4 2		; this.c = @B+4; 
mov 2 @B+5		; guarda id this.c
mov $7.1 @B+6		; guarda real 7.1
mov @B+5 A
itor 
gtrr @B+6	; Expr relop Esimple
mov A @B+7	; guardar el resultado en temporal
mov @B+7 A
jz L2
 mov 2 @B+11		; guarda id this.c
mov #3 @B+12		; guarda entero 3
; Factor -> pari Expr pard
mov #10 @B+13		; guarda entero 10
mov #9 @B+14		; guarda entero 9
mov @B+13 A
divi @B+14	; ENTERO / ENTERO
mov A @B+15
mov @B+12 A
muli @B+15	; ENTERO * ENTERO
mov A @B+16
mov @B+11 A
addi @B+16	; ENTERO + ENTERO
mov A @B+17	; guardar el resultado en temporal
mov @B+17 @B+8		; a = @B+17; 
mov @B+8 @B+18		; guarda id a
mov @B+18 0		; this.a = @B+18; 
mov @B+8 @B+19		; guarda id a
mov #2 @B+20		; guarda entero 2
mov @B+19 A
divi @B+20	; ENTERO / ENTERO
mov A @B+21
mov #2 @B+22		; guarda entero 2
mov @B+21 A
divi @B+22	; ENTERO / ENTERO
mov A @B+23
mov @B+23 @B+9		; b = @B+23; 

;print
mov @B+9 @B+24		; guarda id b
wri @B+24	; print valor entero de temporal
wrl
jmp L3
L2  mov @B+0 @B+23		; guarda id a
mov #2 @B+24		; guarda entero 2
mov @B+24 A
itor
mov A @B+26
mov @B+23 A
divr @B+26	; Term : REAL / ENTERO
mov A @B+25
mov @B+25 A
rtoi
mov A @B+25
mov @B+25 0		; this.a = @B+25; 
L3 
;print
mov 0 @B+27		; guarda id this.a
wri @B+27	; print valor entero de temporal
wrl

;print
mov @B+0 @B+28		; guarda id a
wrr @B+28	; print valor real de temporal
wrl

;print
mov 2 @B+29		; guarda id this.c
wri @B+29	; print valor entero de temporal
wrl
halt
