;Temporal i = @B+0
;Temporal der = @B+3
;Temporal j = @B+1
;Temporal der = @B+7
entra con: p
;Temporal j = @B+1
;Temporal der = @B+19
;Temporal i = @B+0
;Temporal der = @B+22
;Temporal i = @B+0
;Temporal der = @B+29
;Temporal sumatotal = @B+26
;Temporal der = @B+30
;Temporal j = @B+1
;Temporal der = @B+34
;Temporal sumafila = @B+25
;Temporal der = @B+35
;Temporal sumafila = @B+25
;Temporal der = @B+46
;Temporal j = @B+1
;Temporal der = @B+49
;Imprime temp = 
;Temporal i = @B+0
;Temporal der = @B+53
;Temporal sumatotal = @B+26
;Temporal der = @B+56
;Imprime temp = 
mov #19 B
jmp L10

L10  mov #0 @B+3		; guarda entero 0
mov @B+3 @B+0		; Instr : Ref asig Expr pyc 
L3 mov @B+0 @B+4		; guarda id i
mov #4 @B+5		; guarda entero 4
mov @B+4 A
lssi @B+5	; Expr relop Esimple
mov A @B+6	; guardar el resultado en temporal
	; WHILE
mov @B+6 A
jz L4	 ; if else
 mov #0 @B+7		; guarda entero 0
mov @B+7 @B+1		; Instr : Ref asig Expr pyc 
L1 mov @B+1 @B+8		; guarda id j
mov #4 @B+9		; guarda entero 4
mov @B+8 A
lssi @B+9	; Expr relop Esimple
mov A @B+10	; guardar el resultado en temporal
	; WHILE
mov @B+10 A
jz L2	 ; if else
 mov #0 11	; guarda 0 y empieza recursivo arrays de p
mov @B+0 @B+12		; guarda id i
mov 11 A 	; hace recursivo de arrays
muli #4
addi @B+12 
mov A 13 
mov @B+1 @B+14		; guarda id j
mov @B+13 A 	; hace recursivo de arrays
muli #4
addi @B+14 
mov A 15 

;scan
mov @B+15 A
muli #1 
addi #3
rdr @B+16	; guardar valor real en temporal
mov @B+16 @A

mov @B+1 @B+17		; guarda id j
mov #1 @B+18		; guarda entero 1
mov @B+17 A
addi @B+18	; ENTERO + ENTERO
mov A @B+19	; guardar el resultado en temporal
mov @B+19 @B+1		; Instr : Ref asig Expr pyc 
jmp L1
	; ENDWHILE
L2 mov @B+0 @B+20		; guarda id i
mov #1 @B+21		; guarda entero 1
mov @B+20 A
addi @B+21	; ENTERO + ENTERO
mov A @B+22	; guardar el resultado en temporal
mov @B+22 @B+0		; Instr : Ref asig Expr pyc 
jmp L3
	; ENDWHILE
L4 mov @B+0 @B+23		; guarda id i
mov @B+1 @B+24		; guarda id j
mov @B+23 A
eqli @B+24	; Expr relop Esimple
mov A @B+25	; guardar el resultado en temporal
mov @B+25 A
jz L9 	 ; if 
 rdi @B+27	; guardar valor entero en temporal

mov #0 @B+29		; guarda entero 0
mov @B+29 @B+0		; Instr : Ref asig Expr pyc 
mov #0 @B+30		; guarda entero 0
mov @B+30 A
itor
mov A @B+30
mov @B+30 @B+26		; Instr : Ref asig Expr pyc 
L7 mov @B+0 @B+31		; guarda id i
mov #4 @B+32		; guarda entero 4
mov @B+31 A
lssi @B+32	; Expr relop Esimple
mov A @B+33	; guardar el resultado en temporal
	; WHILE
mov @B+33 A
jz L8	 ; if else
 mov #0 @B+34		; guarda entero 0
mov @B+34 @B+1		; Instr : Ref asig Expr pyc 
mov #0 @B+35		; guarda entero 0
mov @B+35 A
itor
mov A @B+35
mov @B+35 @B+25		; Instr : Ref asig Expr pyc 
L5 mov @B+1 @B+36		; guarda id j
mov #4 @B+37		; guarda entero 4
mov @B+36 A
lssi @B+37	; Expr relop Esimple
mov A @B+38	; guardar el resultado en temporal
	; WHILE
mov @B+38 A
jz L6	 ; if else
 mov @B+25 @B+39		; guarda id sumafila
mov #0 40	; guarda 0 y empieza recursivo arrays de this.p
mov @B+0 @B+41		; guarda id i
mov 40 A 	; hace recursivo de arrays
muli #4
addi @B+41 
mov A 42 
mov @B+1 @B+43		; guarda id j
mov @B+42 A 	; hace recursivo de arrays
muli #4
addi @B+43 
mov A 44 
mov #0 @B+44		; guarda 0 y empieza recursivo arrays de this.p
mov @B+44 @B+45		; guarda id this.p
muli #1 
addi #3
mov @A @B+45
mov @B+39 A
addr @B+45	; REAL + REAL
mov A @B+46	; guardar el resultado en temporal
mov @B+46 @B+25		; Instr : Ref asig Expr pyc 
mov @B+1 @B+47		; guarda id j
mov #1 @B+48		; guarda entero 1
mov @B+47 A
addi @B+48	; ENTERO + ENTERO
mov A @B+49	; guardar el resultado en temporal
mov @B+49 @B+1		; Instr : Ref asig Expr pyc 
jmp L5
	; ENDWHILE
L6 mov @B+25 @B+50		; guarda id sumafila
wrr @B+50	; print valor real de temporal
wrl
mov @B+0 @B+51		; guarda id i
mov #1 @B+52		; guarda entero 1
mov @B+51 A
addi @B+52	; ENTERO + ENTERO
mov A @B+53	; guardar el resultado en temporal
mov @B+53 @B+0		; Instr : Ref asig Expr pyc 
mov @B+26 @B+54		; guarda id sumatotal
mov @B+25 @B+55		; guarda id sumafila
mov @B+54 A
addr @B+55	; REAL + REAL
mov A @B+56	; guardar el resultado en temporal
mov @B+56 @B+26		; Instr : Ref asig Expr pyc 
jmp L7
	; ENDWHILE
L8 mov @B+26 @B+57		; guarda id sumatotal
mov @B+27 @B+58		; guarda id div
mov @B+58 A
itor
mov A @B+60
mov @B+57 A
divr @B+60	; Term : REAL / ENTERO
mov A @B+59
wrr @B+59	; print valor real de temporal
wrl
L9 halt
