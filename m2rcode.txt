mov #0 B
jmp L4

; metodo: 'suma'
L1 mov @B+0 @B+4		; guarda id c
mov @B+1 @B+5		; guarda id b
mov @B+4 A
addi @B+5	; ENTERO + ENTERO
mov A @B+6	; guardar el resultado en temporal
mov @B+6 2		; Instr : Ref asig Expr pyc 
mov @B+2 @B+7		; guarda id sum
; Secuencia de retorno
mov @B+7 @B-3
mov @B-2 A
jmp @A
; DIR USED = 8
mov @B-2 A
jmp @A

; metodo: 'resta'
L2 mov @B+0 @B+4		; guarda id c
mov @B+1 @B+5		; guarda id b
mov @B+4 A
subi @B+5	; ENTERO - ENTERO
mov A @B+6	; guardar el resultado en temporal
mov @B+6 2		; Instr : Ref asig Expr pyc 
mov @B+2 @B+7		; guarda id res
; Secuencia de retorno
mov @B+7 @B-3
mov @B-2 A
jmp @A
; DIR USED = 8
mov @B-2 A
jmp @A

L4  mov #5 @B+2		; guarda entero 5
mov @B+2 0		; Instr : Ref asig Expr pyc 
mov @B+0 @B+3		; guarda id a
mov #3 @B+4		; guarda entero 3
mov @B+3 A
addi @B+4	; ENTERO + ENTERO
mov A @B+5	; guardar el resultado en temporal
mov #2 @B+6		; guarda entero 2
mov @B+5 A
subi @B+6	; ENTERO - ENTERO
mov A @B+7	; guardar el resultado en temporal
mov #8 @B+8		; guarda entero 8
mov #2 @B+9		; guarda entero 2
mov @B+8 A
divi @B+9	; ENTERO / ENTERO
mov A @B+10
mov @B+7 A
addi @B+10	; ENTERO + ENTERO
mov A @B+11	; guardar el resultado en temporal
mov @B+11 1		; Instr : Ref asig Expr pyc 
mov @B+1 @B+12		; guarda id b
wri @B+12	; print valor entero de temporal
wrl
mov #4 @B+13		; guarda entero 4
mov @B+13 @B+17	; asigna un param
mov #5 @B+14		; guarda entero 5
mov @B+14 @B+18	; asigna un param
; Secuencia de llamada
mov B @B+16
mov B A
addi #17
mov A B
mvetq L3 @B-2
jmp L1
L3 mov @B-1 B
mov @B+14 1		; Instr : Ref asig Expr pyc 
mov @B+1 @B+15		; guarda id b
wri @B+15	; print valor entero de temporal
wrl
halt
