mov #0 B
jmp L5

; metodo: 'factorial'
L1 
;print
mov @B+0 @B+2		; guarda id n
wri @B+2	; print valor entero de temporal
wrl
mov @B+0 @B+3		; guarda id n
mov #1 @B+4		; guarda entero 1
mov @B+3 A
leqi @B+4	; Expr relop Esimple
mov A @B+5	; guardar el resultado en temporal
mov @B+5 A
jz L3
mov #1 @B+6		; guarda entero 1
; Secuencia de retorno
mov @B+6 @B-3
mov @B-2 A
jmp @A
jmp L4
L3 mov @B+0 @B+7		; guarda id n
mov @B+0 @B+8		; guarda id n
mov #1 @B+9		; guarda entero 1
mov @B+8 A
subi @B+9	; ENTERO - ENTERO
mov A @B+10	; guardar el resultado en temporal
mov @B+10 @B+15	; asigna un param Par
; Secuencia de llamada
mov B @B+12
mov B A
addi #11
mov A B
mvetq L2 @B-2
jmp L1
L2 mov @B-1 B
mov @B+7 A
muli @B+10	; ENTERO * ENTERO
mov A @B+11
; Secuencia de retorno
mov @B+11 @B-3
mov @B-2 A
jmp @A
L4 ; DIR USED = 12
mov #0 @B-3
mov @B-2 A
jmp @A

L5  
;print
mov #6 @B+1		; guarda entero 6
mov @B+1 @B+6	; asigna un param Par
; Secuencia de llamada
mov B @B+3
mov B A
addi #4
mov A B
mvetq L6 @B-2
jmp L1
L6 mov @B-1 B
wri @B+1	; print valor entero de temporal
wrl
halt
